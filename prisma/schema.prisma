generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contiene {
  id              Int        @id @default(autoincrement()) // Clave primaria autoincremental
  nombre_producto String     @db.VarChar(100)
  unidades        Int?
  nombre          String     @db.VarChar(100)
  localidad       String     @db.VarChar(100)
  pedidoId        Int        // Clave foránea para relacionar con `pedido`
  pedido          pedido     @relation(fields: [pedidoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productos       productos  @relation(fields: [nombre_producto, nombre, localidad], references: [nombre_producto, nombre, localidad], onDelete: NoAction, onUpdate: NoAction)

  @@unique([nombre_producto, nombre, localidad, pedidoId]) // Clave única para evitar duplicados en esta combinación
}

model pedido {
  id           Int        @id @default(autoincrement()) // Clave primaria autoincremental
  fecha        DateTime?  @db.Date
  precio_total Decimal?   @db.Decimal(10, 2)
  correo       String?    @db.VarChar(100)
  estado       EstadoPedido  @default(en_cocina) // Nuevo campo de estado, con valor por defecto 'solicitado'
  contiene     contiene[] // Relación uno a muchos con `contiene`
  usuario      usuario?   @relation(fields: [correo], references: [correo], onDelete: NoAction, onUpdate: NoAction)
}

model productos {
  nombre_producto String      @db.VarChar(100)
  descripcion     String?
  precio          Decimal?    @db.Decimal(10, 2)
  nombre          String      @db.VarChar(100)
  localidad       String      @db.VarChar(100)
  foto            String?     @db.VarChar(255) // Nueva columna para la ruta de la foto
  contiene        contiene[]  // Relación uno a muchos con `contiene`
  restaurante     restaurante @relation(fields: [nombre, localidad], references: [nombre, localidad], onDelete: NoAction, onUpdate: NoAction)

  @@id([nombre, localidad, nombre_producto]) // Clave primaria compuesta
}


model restaurante {
  nombre      String      @db.VarChar(100)
  numtelefono String?     @db.VarChar(15)
  categoria   String?     @db.VarChar(50)
  correo      String?     @db.VarChar(100)
  localidad   String      @db.VarChar(100)
  productos   productos[] // Relación uno a muchos con `productos`
  usuario     usuario?    @relation(fields: [correo], references: [correo], onDelete: NoAction, onUpdate: NoAction)

  @@id([nombre, localidad]) // Clave primaria compuesta
}

model usuario {
  correo         String        @id @db.VarChar(100)
  nombre_usuario String        @db.VarChar(100)
  contrasena     String        @db.VarChar(100)
  localidad      String?       @db.VarChar(100)
  calle          String?       @db.VarChar(100)
  piso           String?       @db.VarChar(10)
  numero         Int?
  codigo_postal  String?       @db.VarChar(10)
  tipo           tipo_usuario
  pedido         pedido[]      // Relación uno a muchos con `pedido`
  restaurante    restaurante[] // Relación uno a muchos con `restaurante`
}

enum tipo_usuario {
  Cliente
  Propietario
}

// Enum para representar el estado del pedido
enum EstadoPedido {
  en_cocina
  en_camino
  completado
}
