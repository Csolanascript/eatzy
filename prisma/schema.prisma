generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cliente {
  correo                                 String     @id @db.VarChar(100)
  localidad                              String?    @db.VarChar(100)
  calle                                  String?    @db.VarChar(100)
  piso                                   String?    @db.VarChar(10)
  numero                                 Int?
  codigo_postal                          String?    @db.VarChar(10)
  usuario                                usuario    @relation(fields: [correo], references: [correo], onDelete: NoAction, onUpdate: NoAction)
  localidad_cliente_localidadTolocalidad localidad? @relation("cliente_localidadTolocalidad", fields: [localidad], references: [ciudad], onDelete: NoAction, onUpdate: NoAction)
  pedido                                 pedido[]
}

model contiene {
  id                 Int
  nombre_producto    String    @db.VarChar(100)
  unidades           Int?
  nombre_restaurante String    @db.VarChar(100)
  localidad          String    @db.VarChar(100)
  pedido             pedido    @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productos          productos @relation(fields: [nombre_producto, nombre_restaurante, localidad], references: [nombre_producto, nombre_restaurante, localidad], onDelete: NoAction, onUpdate: NoAction)

  @@id([id, nombre_producto, nombre_restaurante, localidad])
}

model pedido {
  id           Int        @id
  fecha        DateTime?  @db.Date
  precio_total Decimal?   @db.Decimal(10, 2)
  correo       String?    @db.VarChar(100)
  contiene     contiene[]
  cliente      cliente?   @relation(fields: [correo], references: [correo], onDelete: NoAction, onUpdate: NoAction)
}

model productos {
  nombre_producto    String      @db.VarChar(100)
  descripcion        String?
  precio             Decimal?    @db.Decimal(10, 2)
  nombre_restaurante String      @db.VarChar(100)
  localidad          String      @db.VarChar(100)
  contiene           contiene[]
  restaurante        restaurante @relation(fields: [nombre_restaurante, localidad], references: [nombre_restaurante, localidad], onDelete: NoAction, onUpdate: NoAction)

  @@id([nombre_restaurante, localidad, nombre_producto])
}

model propietario {
  correo  String  @id @db.VarChar(100)
  usuario usuario @relation(fields: [correo], references: [correo], onDelete: NoAction, onUpdate: NoAction)
}

model restaurante {
  nombre_restaurante                         String      @db.VarChar(100)
  numtelefono                                String?     @db.VarChar(15)
  categoria                                  String?     @db.VarChar(50)
  correo                                     String?     @db.VarChar(100)
  localidad                                  String      @db.VarChar(100)
  ubicacion                                  String?     @db.VarChar(100)
  productos                                  productos[]
  localidad_restaurante_localidadTolocalidad localidad   @relation("restaurante_localidadTolocalidad", fields: [localidad], references: [ciudad], onDelete: NoAction, onUpdate: NoAction)

  @@id([nombre_restaurante, localidad])
}

model usuario {
  correo         String       @id @db.VarChar(100)
  nombre_usuario String       @db.VarChar(100)
  contrasena     String       @db.VarChar(100)
  tipo           tipo_usuario
  cliente        cliente?
  propietario    propietario?
}

model localidad {
  ciudad                                       String        @id @db.VarChar(100)
  cliente_cliente_localidadTolocalidad         cliente[]     @relation("cliente_localidadTolocalidad")
  restaurante_restaurante_localidadTolocalidad restaurante[] @relation("restaurante_localidadTolocalidad")
}

enum tipo_usuario {
  Cliente
  Propietario
}
